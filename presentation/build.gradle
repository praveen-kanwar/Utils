apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    // Build Specifications
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    // To Auto Increment VersionName & VersionCode of Application
    def versionPropsFile = file('version.properties')
    // Setting default value
    def versionC = 0000
    def versionN = '0.0.0.0'
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionProps
        def VERSION_MAJOR = versionProps['VERSION_MAJOR'].toInteger()
        def VERSION_MINOR = versionProps['VERSION_MINOR'].toInteger()
        def VERSION_PATCH = versionProps['VERSION_PATCH'].toInteger()
        def VERSION_BUILD = versionProps['VERSION_BUILD'].toInteger() + 1
        versionProps['VERSION_BUILD'] = VERSION_BUILD.toString()
        versionProps.store(versionPropsFile.newWriter(), " suppress inspection \"UnusedProperty\" for whole file")
        versionC = VERSION_MAJOR * 10000 + VERSION_MINOR * 1000 + VERSION_PATCH * 100 + VERSION_BUILD
        versionN = "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_BUILD}"
    } else {
        throw new FileNotFoundException("Unable to read versioning file")
    }

    // Signing Credential File
    def keystorePropertiesFile = file('keystore.properties')
    // Properties object to access Keystore file
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.canRead()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } else {
        throw new FileNotFoundException("Unable to keystore file for signing")
    }

    // Signing Config
    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'].toString())
            storePassword keystoreProperties['storePassword'].toString()
            keyAlias keystoreProperties['keyAlias'].toString()
            keyPassword keystoreProperties['keyPassword'].toString()
        }
    }

    // Application Specifications
    defaultConfig {
        applicationId 'com.tejora.utils.sample'
        minSdkVersion 21
        targetSdkVersion 29
        multiDexEnabled true
        versionCode versionC
        versionName versionN
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions "version"
    productFlavors {
        sandbox {
            dimension "version"
            applicationIdSuffix ".sandbox"
            versionNameSuffix "_sandbox"
        }
        uat {
            dimension "version"
            applicationIdSuffix ".uat"
            versionNameSuffix "_uat"
        }
        prod {
            dimension "version"
            signingConfig signingConfigs.release
        }
    }

    // Ignore Irrelevant Build Variants
    variantFilter { variant ->
        def names = variant.flavors*.name
        // Ignore Release Build for Dev & UAT Build
        if (variant.buildType.name == 'release' && (names.contains("sandbox") || names.contains("uat"))) {
            setIgnore(true)
        }
        // Ignore Debug Build for Production
        else if (variant.buildType.name == 'debug' && names.contains("prod")) {
            setIgnore(true)
        }
    }

    // Rename Generated APK With Relevant Name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "UtilsSample"
            def separator = "_"
            def version = variant.versionName
            def newApkName = "${project}${separator}${version}.apk"
            outputFileName = new File(newApkName)
        }
    }

    dexOptions {
        preDexLibraries = false
    }

    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
        abortOnError true
    }
}

dependencies {
    // Reference To BuildSystem Package
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies

    // Basic Dependencies
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':utils')

    // All Maven & Google Repository Dependencies
    implementation presentationDependencies.appCompat
    implementation presentationDependencies.constraintLayout


    implementation presentationDependencies.coreKTX
    implementation presentationDependencies.kotlin
    implementation presentationDependencies.legacySupport
    implementation presentationDependencies.material


    // Android UI Testing Libraries
    testImplementation presentationTestDependencies.junit

    // Android UI Testing Libraries
    androidTestImplementation presentationTestDependencies.androidXJunit
    androidTestImplementation presentationTestDependencies.espresso
    androidTestImplementation presentationTestDependencies.runner
}

