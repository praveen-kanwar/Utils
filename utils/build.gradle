buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
    bintrayRepo = 'UtilsRepository'
    bintrayName = 'com.tejora'
    publishedGroupId = 'com.tejora'
    libraryName = 'Utils'
    artifact = 'utils'
    libraryDescription = 'Tejora\'s Utility Library For Android'
    siteUrl = 'https://github.com/praveen-kanwar/Utils'
    gitUrl = 'https://github.com/praveen-kanwar/Utils.git'
    libraryVersion = '1.0.45'
    developerId = 'praveen-kanwar'
    developerName = 'Praveen Kanwar'
    developerEmail = 'praveen.kanwar@tejora.com'
    organization = 'tejora-technologies'
    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    // Build Specifications
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    // To Auto Increment VersionName & VersionCode of Library
    def versionPropsFile = file('version.properties')
    // Setting Default Value
    def versionC = 0000
    def versionN = '0.0.0.0'
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionProps
        def VERSION_MAJOR = versionProps['VERSION_MAJOR'].toInteger()
        def VERSION_MINOR = versionProps['VERSION_MINOR'].toInteger()
        def VERSION_PATCH = versionProps['VERSION_PATCH'].toInteger()
        def VERSION_BUILD = versionProps['VERSION_BUILD'].toInteger() + 1
        versionProps['VERSION_BUILD'] = VERSION_BUILD.toString()
        versionProps.store(versionPropsFile.newWriter(), " suppress inspection \"UnusedProperty\" for whole file")
        versionC = VERSION_MAJOR * 10000 + VERSION_MINOR * 1000 + VERSION_PATCH * 100 + VERSION_BUILD
        versionN = "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_BUILD}"
    } else {
        throw new FileNotFoundException("Unable to read versioning file")
    }

    // Application Specifications
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode versionC
        versionName versionN
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Specify Kotlin JVM Target
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
        abortOnError true
    }
}

dependencies {
    // Reference To BuildSystem Package
    def utilsDependencies = rootProject.ext.utilsDependencies

    // Basic Dependencies
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // All Maven & Google Repository Dependencies
    implementation utilsDependencies.appCompat
    implementation utilsDependencies.coreKTX
    implementation utilsDependencies.gson
    implementation utilsDependencies.javaX
    implementation utilsDependencies.kotlin
    implementation utilsDependencies.rootBeer
    implementation utilsDependencies.rxJava
    implementation utilsDependencies.safteyNet
    implementation utilsDependencies.smsVerify
}

apply from: 'install.gradle'
apply from: 'bintray.gradle'
